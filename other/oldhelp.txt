@bot.slash_command(name="help", description="View help commands.", guild_ids=serverIDS)
async def help(interaction : Interaction):
    class Dropdown(nextcord.ui.Select):
        def __init__(self):

            # Set the options that will be presented inside the dropdown
            options = [
                nextcord.SelectOption(label='Anti-Phish', description='View commands that can customize preventing scams and phishing links.', emoji='ðŸš«'),
                #nextcord.SelectOption(label='Anti-Raid/Nuke', description='View commands to turn on or off Anti-Raid/Nuke', emoji='ðŸ’£'),
                #nextcord.SelectOption(label='Moderation', description='View commands that can help moderate your server.', emoji='ðŸ”¨'),
            ]

            # The placeholder is what will be shown when no option is chosen
            # The min and max values indicate we can only pick one of the three options
            # The options parameter defines the dropdown options. We defined this above
            super().__init__(placeholder='Choose your favourite colour...', min_values=1, max_values=1, options=options)

        async def callback(self, interaction: nextcord.Interaction):
            # Use the interaction object to send a response message containing
            # the user's favourite colour or choice. The self object refers to the
            # Select object, and the values attribute gets a list of the user's 

                if self.values[0] == "Anti-Phish":
                    embed = nextcord.Embed(
                        title="Anti-Phish Commands",
                        description="There is no commands for Anti-Phish as the module is auto enabled.",
                        color=0x2f3136
                    )
                    await interaction.response.send_message(embed=embed, ephemeral=True)
                #elif self.values[0] == "Anti-Raid/Nuke":
                    #embed = nextcord.Embed(
                        #title="Anti-Raid/Nuke",
                        #description="Set diff"
                    #)
                    #await interaction.response.send_message(f'anti nuke', ephemeral=True)
                #elif self.values[0] == "Moderation":
                    #await interaction.response.send_message(f'moderation', ephemeral=True)
            
    class DropdownView(nextcord.ui.View):
        def __init__(self):
            super().__init__()

            # Adds the dropdown to our view object.
            self.add_item(Dropdown())
    view = DropdownView()
    await interaction.response.send_message("Testing", view=view)
         
@bot.command()
async def help(ctx):
    class Dropdown(nextcord.ui.Select):
        def __init__(self):

            # Set the options that will be presented inside the dropdown
            options = [
                nextcord.SelectOption(label='Anti-Phish', description='View commands that can customize preventing scams and phishing links.', emoji='ðŸš«'),
                #nextcord.SelectOption(label='Anti-Raid/Nuke', description='View commands to turn on or off Anti-Raid/Nuke', emoji='ðŸ’£'),
                #nextcord.SelectOption(label='Moderation', description='View commands that can help moderate your server.', emoji='ðŸ”¨'),
            ]

            # The placeholder is what will be shown when no option is chosen
            # The min and max values indicate we can only pick one of the three options
            # The options parameter defines the dropdown options. We defined this above
            super().__init__(placeholder='Choose your favourite colour...', min_values=1, max_values=1, options=options)

        async def callback(self, interaction: nextcord.Interaction):
            # Use the interaction object to send a response message containing
            # the user's favourite colour or choice. The self object refers to the
            # Select object, and the values attribute gets a list of the user's 

                if self.values[0] == "Anti-Phish":
                    embed = nextcord.Embed(
                        title="Anti-Phish Commands",
                        description="There is no commands for Anti-Phish as the module is auto enabled.",
                        color=0x2f3136
                    )
                    await interaction.response.send_message(embed=embed, ephemeral=True)
                #elif self.values[0] == "Anti-Raid/Nuke":
                    #embed = nextcord.Embed(
                        #title="Anti-Raid/Nuke",
                        #description="Set diff"
                    #)
                    #await interaction.response.send_message(f'anti nuke', ephemeral=True)
                #elif self.values[0] == "Moderation":
                    #await interaction.response.send_message(f'moderation', ephemeral=True)
            
    class DropdownView(nextcord.ui.View):
        def __init__(self):
            super().__init__()

            # Adds the dropdown to our view object.
            self.add_item(Dropdown())
    view = DropdownView()
    await ctx.send("Testing", view=view)